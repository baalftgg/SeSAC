https://programmers.co.kr/learn/courses/30/lessons/42583

# 처음 생각한 오답 : 세부적인 묘사 치중, 효율성 실패
def solution(bridge_length, weight, truck_weights):
    answer = 0
    # 각 트럭의 무게를 받을 카운터
    bridge = []
    # 다리에 있는 각 트럭의 시간 카운터
    time = []
    # 다리 대기나 건너는 트럭이 있는 동안
    while len(truck_weights)>0 or len(bridge)>0:
        # 다리를 건넌 트럭 (다리에 머문 시간이 다리길이 만큼이면 제거)
        if len(bridge)>0:
            if time[0] == bridge_length:
                bridge.pop(0)
                time.pop(0)
        # 다리에 진입하는 트럭 (다리 길이 체크, 무게 체크)
        if len(truck_weights)>0:
            if len(bridge)<bridge_length and sum(bridge)+truck_weights[0]<=weight:
                a = truck_weights.pop(0)
                bridge.append(a)
                time.append(0)
        answer += 1
        for t in time:
            t += 1
    return answer
    
# 그 다음 답 : 가상 묘사
def solution(bridge_length, weight, truck_weights):
    answer = 0
    # 다리위의 상황을 하나의 리스트로 표현 (원소가 0인 배열 활용)
    bridge = [0] * bridge_length
    while len(bridge) > 0:
        answer += 1
        bridge.pop(0)
        if len(truck_weights) > 0:
            if sum(bridge) + truck_weights[0] <= weight:
                bridge.append(truck_weights.pop(0))
            else:
                bridge.append(0)
    return answer
    
# 효율성 좋고 짧은 답 : collection, deque, reverse 공부 필요
from collections import deque

def solution(bridge_length, weight, truck_weights):
    bridge = deque(0 for _ in range(bridge_length))
    total_weight = 0
    step = 0
    truck_weights.reverse()

    while truck_weights:
        total_weight -= bridge.popleft()
        if total_weight + truck_weights[-1] > weight:
            bridge.append(0)
        else:
            truck = truck_weights.pop()
            bridge.append(truck)
            total_weight += truck
        step += 1

    step += bridge_length

    return step
